{"version":3,"sources":["components/game/background.mp3","components/board-cell/boardCell.tsx","services/cell.ts","services/levels.ts","components/tutorial/tutorial.tsx","components/game/game.tsx","services/hooks.ts","App.tsx","serviceWorker.ts","index.tsx","components/art/logo.png","components/board-cell/virus.svg","components/board-cell/antibody.svg","components/board-cell/deadmatter.svg","components/board-cell/superspreader.svg"],"names":["module","exports","BoardCell","cell","size","className","type","style","left","x","top","y","width","height","CellType","activateAntiBodies","antiBodies","board","columns","rows","directions","forEach","antibody","direction","y1","x1","virus","superSpreader","includes","hasKilledEnemies","empty","killAllNearbyEnemies","activateSuperSpreaders","superSpreaders","infectAllNearbyEmpty","getNeighbors","neighbors","i","length","levelEndMessage","turnCounter","level1","cellSize","maxClicks","map","level2","firstGlider","firstDeadMatter","deadMatter","firstSuperSpread","level6","level7","level8","Tutorial","id","src","alt","deadmatter","superspreader","require","Game","boardRef","useState","setHeight","setWidth","setCellSize","setMap","setMaxClicks","setBoard","cells","setCells","isLoading","setIsLoading","isRunning","setIsRunning","message","setMessage","cellsUsed","setCellsUsed","setTurnCounter","currentLevel","setCurrentLevel","hasRoundEnded","setHasRoundEnded","hasWonRound","setHasWonRound","reset","newMap","useEffect","isOriginal","push","makeCells","level","1","2","3","4","5","6","7","8","callback","intervalInMilliseconds","watchProperties","callbackReference","useRef","current","intervalReference","setInterval","clearInterval","useInterval","newBoard","cloneDeep","neighboursCount","getNeighboursCount","isVirusCellWithInvalidNeighborsCount","isEmptyCellWith3Neighbors","getNextBoard","hasAnyChanges","getHasAnyChanges","hasWon","getHasWonRound","endRound","nextTurn","logo","backgroundSize","onClick","clientX","clientY","elemOffset","rect","getBoundingClientRect","doc","document","documentElement","window","pageXOffset","clientLeft","pageYOffset","clientTop","getElementOffset","offsetX","offsetY","Math","floor","getCellCoordinates","find","ref","n","key","emptyCells","sampleSize","pick","loop","url","playStatus","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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ACV7B,OAAQ,IACRD,MAAO,IACP+B,UAAW,EACXC,IAAK,CACD,CACI9B,EAASgB,MACThB,EAASY,MACTZ,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,OAEb,CACIhB,EAASgB,MACThB,EAASgB,MACThB,EAASY,MACTZ,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,OAEb,CACIhB,EAASY,MACTZ,EAASY,MACTZ,EAASY,MACTZ,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,OAEb,CACIhB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,OAEb,CACIhB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,OAEb,CACIhB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,OAEb,CACIhB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASY,OAEb,CACIZ,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASgB,MACThB,EAASY,MACTZ,EAASgB,OAEb,CACI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","file":"static/js/main.f696c23c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.7aac215e.mp3\";","import React from 'react';\r\nimport './boardCell.css';\r\nimport { Cell } from '../../services/cell';\r\n\r\ntype Props = {\r\n    cell: Cell;\r\n    size: number;\r\n};\r\n\r\nexport default function BoardCell({ cell, size }: Props) {\r\n    return (\r\n        <div\r\n            className={`cell ${cell.type}`}\r\n            style={{\r\n                left: `${size * cell.x + 1}px`,\r\n                top: `${size * cell.y + 1}px`,\r\n                width: `${size - 1}px`,\r\n                height: `${size - 1}px`,\r\n            }}\r\n        />\r\n    );\r\n}\r\n","export type Board = CellType[][];\nexport type CellLocation = { x: number; y: number };\n\nexport type Cell = {\n    x: number;\n    y: number;\n    type: CellType;\n    isOriginal: boolean;\n};\n\nexport enum CellType {\n    antibody = 'antibody',\n    deadMatter = 'deadMatter',\n    empty = 'empty',\n    virus = 'virus',\n    superSpreader = 'superSpreader',\n}\n\nexport function activateAntiBodies(antiBodies: CellLocation[], board: Board, columns: number, rows: number) {\n    const directions = [\n        [-1, -1],\n        [-1, 0],\n        [-1, 1],\n        [0, 1],\n        [1, 1],\n        [1, 0],\n        [1, -1],\n        [0, -1],\n    ];\n    antiBodies.forEach((antibody) => {\n        directions.forEach((direction) => {\n            const y1 = antibody.y + direction[0];\n            const x1 = antibody.x + direction[1];\n            if (x1 >= 0 && x1 < columns && y1 >= 0 && y1 < rows && [CellType.virus, CellType.superSpreader].includes(board[y1][x1])) {\n                board = killAllNearbyEnemies(antibody, board, columns, rows);\n            }\n        });\n    });\n    return board;\n}\n\nexport function activateSuperSpreaders(superSpreaders: CellLocation[], board: Board, columns: number, rows: number) {\n    const directions = [\n        [-1, -1],\n        [-1, 0],\n        [-1, 1],\n        [0, 1],\n        [1, 1],\n        [1, 0],\n        [1, -1],\n        [0, -1],\n    ];\n    superSpreaders.forEach((superSpreader) => {\n        directions.forEach((direction) => {\n            const y1 = superSpreader.y + direction[0];\n            const x1 = superSpreader.x + direction[1];\n            const hasNearbyVirus = x1 >= 0 && x1 < columns && y1 >= 0 && y1 < rows && board[y1][x1] === CellType.virus;\n            if (hasNearbyVirus) {\n                board = infectAllNearbyEmpty(superSpreader, board, columns, rows);\n            }\n        });\n    });\n    return board;\n}\n\nexport function getNeighbors(board: Board, x: number, y: number, columns: number, rows: number) {\n    let neighbors = 0;\n    const directions = [\n        [-1, -1],\n        [-1, 0],\n        [-1, 1],\n        [0, 1],\n        [1, 1],\n        [1, 0],\n        [1, -1],\n        [0, -1],\n    ];\n    for (let i = 0; i < directions.length; i += 1) {\n        const direction = directions[i];\n        const y1 = y + direction[0];\n        const x1 = x + direction[1];\n\n        const isNearbyCellViralFriendly =\n            x1 >= 0 &&\n            x1 < columns &&\n            y1 >= 0 &&\n            y1 < rows &&\n            board[y1][x1] === CellType.virus;\n        if (isNearbyCellViralFriendly) {\n            neighbors += 1;\n        }\n    }\n\n    return neighbors;\n}\n\nfunction infectAllNearbyEmpty(superSpreader: CellLocation, board: Board, columns: number, rows: number) {\n    const directions = [\n        [-1, -1],\n        [-1, 0],\n        [-1, 1],\n        [0, 1],\n        [1, 1],\n        [1, 0],\n        [1, -1],\n        [0, -1],\n    ];\n    directions.forEach((direction) => {\n        const y1 = superSpreader.y + direction[0];\n        const x1 = superSpreader.x + direction[1];\n        const isNearbyEmptyCell = x1 >= 0 && x1 < columns && y1 >= 0 && y1 < rows && board[y1][x1] === CellType.empty;\n        if (isNearbyEmptyCell) {\n            board[y1][x1] = CellType.virus;\n        }\n    });\n    board[superSpreader.y][superSpreader.x] = CellType.virus;\n    return board;\n}\n\nfunction killAllNearbyEnemies(antibody: CellLocation, board: Board, columns: number, rows: number) {\n    const directions = [\n        [-1, -1],\n        [-1, 0],\n        [-1, 1],\n        [0, 1],\n        [1, 1],\n        [1, 0],\n        [1, -1],\n        [0, -1],\n    ];\n    let hasKilledEnemies = false;\n    directions.forEach((direction) => {\n        const y1 = antibody.y + direction[0];\n        const x1 = antibody.x + direction[1];\n        const isNearbyViralCell =\n            x1 >= 0 &&\n            x1 < columns &&\n            y1 >= 0 &&\n            y1 < rows &&\n            [CellType.superSpreader, CellType.virus].includes(board[y1][x1]);\n        if (isNearbyViralCell) {\n            hasKilledEnemies = true;\n            board[y1][x1] = CellType.empty;\n        }\n    });\n    if (hasKilledEnemies) {\n        board[antibody.y][antibody.x] = CellType.empty;\n    }\n\n    return board;\n}\n","import { CellType, Board } from './cell';\n\nexport function getLevel(levelNumber: number) {\n    const x: { [key: string]: Level } = {\n        1: level1,\n        2: level2,\n        3: firstGlider,\n        4: firstDeadMatter,\n        5: firstSuperSpread,\n        6: level6,\n        7: level7,\n        8: level8,\n    };\n    return x[levelNumber];\n}\n\ntype Level = {\n    cellSize: number;\n    height: number;\n    width: number;\n    maxClicks: number;\n    map: Board;\n};\n\nexport const levelEndMessage = {\n    success: (turnCounter: number) =>\n        `GG, you did it! It took ${turnCounter} you iterations. Next time it won't be as easy!`,\n    fail: (turnCounter: number) =>\n        `You have failed to stop the virus from spreading, it took you  ${turnCounter} iterations.`,\n};\n\nconst level1 = {\n    cellSize: 80,\n    height: 240,\n    width: 240,\n    maxClicks: 1,\n    map: [\n        [CellType.empty, CellType.empty, CellType.empty],\n        [CellType.empty, CellType.virus, CellType.virus],\n        [CellType.empty, CellType.virus, CellType.virus],\n    ],\n};\n\nconst level2 = {\n    cellSize: 60,\n    height: 420,\n    width: 420,\n    maxClicks: 1,\n    map: [\n        [CellType.virus, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty],\n        [CellType.virus, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty],\n        [CellType.virus, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty],\n        [CellType.virus, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty],\n        [CellType.virus, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty],\n        [CellType.virus, CellType.empty, CellType.empty, CellType.empty, CellType.virus, CellType.virus, CellType.virus],\n        [CellType.virus, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty],\n    ],\n};\n\nconst firstGlider = {\n    cellSize: 47,\n    height: 470,\n    width: 470,\n    maxClicks: 1,\n    map: [\n        [\n            CellType.empty,\n            CellType.virus,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n        ],\n        [\n            CellType.empty,\n            CellType.empty,\n            CellType.virus,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n        ],\n        [\n            CellType.virus,\n            CellType.virus,\n            CellType.virus,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n        ],\n        [\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n        ],\n        [\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n        ],\n        [\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n        ],\n        [\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.virus,\n        ],\n        [\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.virus,\n            CellType.empty,\n        ],\n        [\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.virus,\n            CellType.virus,\n            CellType.empty,\n            CellType.virus,\n        ],\n        [\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.empty,\n            CellType.virus,\n            CellType.empty,\n            CellType.empty,\n            CellType.virus,\n            CellType.empty,\n        ],\n    ],\n};\n\nconst firstDeadMatter = {\n    cellSize: 70,\n    height: 420,\n    width: 420,\n    maxClicks: 1,\n    map: [\n        [CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty],\n        [CellType.empty, CellType.virus, CellType.virus, CellType.empty, CellType.empty, CellType.empty],\n        [CellType.empty, CellType.virus, CellType.virus, CellType.empty, CellType.empty, CellType.empty],\n        [CellType.deadMatter, CellType.deadMatter, CellType.deadMatter, CellType.virus, CellType.virus, CellType.empty],\n        [CellType.virus, CellType.virus, CellType.empty, CellType.virus, CellType.virus, CellType.empty],\n        [CellType.virus, CellType.virus, CellType.empty, CellType.empty, CellType.virus, CellType.virus],\n    ],\n};\n\nconst firstSuperSpread\n = {\n    cellSize: 47,\n    height: 470,\n    width: 470,\n    maxClicks: 1,\n    map: [\n        [CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty],\n        [CellType.empty, CellType.virus, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty],\n        [CellType.empty, CellType.empty, CellType.virus, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty],\n        [CellType.virus, CellType.virus, CellType.virus, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty],\n        [CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty],\n        [CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty],\n        [CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty],\n        [CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.superSpreader, CellType.empty, CellType.empty, CellType.empty],\n        [CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty],\n        [CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty],\n    ],\n};\n\n\nconst level6 = {\n    cellSize: 47,\n    height: 470,\n    width: 470,\n    maxClicks: 2,\n    map: [\n        [CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty],\n        [CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.superSpreader, CellType.empty, CellType.empty, CellType.empty],\n        [CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.superSpreader, CellType.superSpreader, CellType.empty],\n        [CellType.virus, CellType.empty, CellType.empty, CellType.virus, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.deadMatter],\n        [CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.virus, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.superSpreader],\n        [CellType.virus, CellType.empty, CellType.empty, CellType.empty, CellType.virus, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty],\n        [CellType.empty, CellType.virus, CellType.virus, CellType.virus, CellType.virus, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.superSpreader],\n        [CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.deadMatter],\n        [CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.superSpreader, CellType.empty, CellType.empty],\n        [CellType.empty, CellType.superSpreader, CellType.empty, CellType.superSpreader, CellType.empty, CellType.superSpreader, CellType.superSpreader, CellType.empty, CellType.empty, CellType.empty],\n    ],\n};\n\nconst level7 = {\n    cellSize: 47,\n    height: 470,\n    width: 470,\n    maxClicks: 1,\n    map: [\n        [CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.deadMatter, CellType.superSpreader],\n        [CellType.empty, CellType.virus, CellType.virus, CellType.virus, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.deadMatter, CellType.empty],\n        [CellType.virus, CellType.virus, CellType.virus, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.superSpreader, CellType.empty],\n        [CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.superSpreader, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty],\n        [CellType.empty, CellType.empty, CellType.deadMatter, CellType.deadMatter, CellType.deadMatter, CellType.superSpreader, CellType.empty, CellType.superSpreader, CellType.empty, CellType.empty],\n        [CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty],\n        [CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.virus, CellType.virus, CellType.empty, CellType.empty],\n        [CellType.empty, CellType.superSpreader, CellType.deadMatter, CellType.empty, CellType.empty, CellType.empty, CellType.virus, CellType.virus, CellType.empty, CellType.empty],\n        [CellType.empty, CellType.empty, CellType.deadMatter, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.virus, CellType.virus],\n        [CellType.virus, CellType.virus, CellType.virus, CellType.virus, CellType.virus, CellType.virus, CellType.virus, CellType.virus, CellType.virus, CellType.virus],\n    ],\n};\n\nconst level8 = {\n    cellSize: 47,\n    height: 470,\n    width: 470,\n    maxClicks: 3,\n    map: [\n        [CellType.empty, CellType.virus, CellType.empty, CellType.deadMatter, CellType.antibody, CellType.antibody, CellType.deadMatter, CellType.empty, CellType.empty, CellType.empty],\n        [CellType.empty, CellType.virus, CellType.empty, CellType.deadMatter, CellType.empty, CellType.empty, CellType.deadMatter, CellType.virus, CellType.virus, CellType.virus],\n        [CellType.empty, CellType.virus, CellType.empty, CellType.deadMatter, CellType.empty, CellType.empty, CellType.deadMatter, CellType.empty, CellType.empty, CellType.empty],\n        [CellType.deadMatter, CellType.empty, CellType.deadMatter, CellType.deadMatter, CellType.virus, CellType.empty, CellType.deadMatter, CellType.deadMatter, CellType.empty, CellType.empty],\n        [CellType.superSpreader, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.virus, CellType.empty, CellType.empty, CellType.superSpreader, CellType.empty],\n        [CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.virus, CellType.empty, CellType.empty, CellType.empty, CellType.empty],\n        [CellType.empty, CellType.superSpreader, CellType.deadMatter, CellType.deadMatter, CellType.virus, CellType.empty, CellType.deadMatter, CellType.deadMatter, CellType.empty, CellType.empty],\n        [CellType.empty, CellType.empty, CellType.empty, CellType.deadMatter, CellType.empty, CellType.empty, CellType.deadMatter, CellType.empty, CellType.virus, CellType.empty],\n        [CellType.virus, CellType.virus, CellType.virus, CellType.deadMatter, CellType.empty, CellType.empty, CellType.deadMatter, CellType.empty, CellType.virus, CellType.empty],\n        [CellType.empty, CellType.empty, CellType.empty, CellType.deadMatter, CellType.antibody, CellType.antibody, CellType.deadMatter, CellType.empty, CellType.virus, CellType.empty],\n    ]\n};\n","import React from 'react';\r\nimport './tutorial.css';\r\nimport virus from '../board-cell/virus.svg';\r\nimport antibody from '../board-cell/antibody.svg';\r\nimport deadmatter from '../board-cell/deadmatter.svg';\r\nimport superspreader from '../board-cell/superspreader.svg';\r\n\r\nexport default function Tutorial() {\r\n\r\n   return (\r\n    <div className=\"Tutorial\">\r\n\r\n    <h3>Instructions</h3>\r\n\r\n    <table>\r\n\r\n        <tr>\r\n            <th></th>\r\n            <th>Type</th> \r\n            <th>Description</th>\r\n        </tr>\r\n\r\n        <tr>\r\n            <td><img id=\"CellPicture\" src={virus} alt=\"Virus\"/></td>\r\n            <td>Virus</td>\r\n            <td id=\"description\">This little guy survives if it has 2 or 3 infected cells around it. Also if a healthy cell is surrounded by 3 infected cells it becomes infected.</td>\r\n        </tr>\r\n\r\n        <tr>\r\n            <td><img id=\"CellPicture\" src={antibody} alt=\"Antibody\"/></td>\r\n            <td>Antibody</td>\r\n            <td>This little guy is a hero. Antibodies kill virus cells if they come into contact with eachother.</td>\r\n        </tr>\r\n\r\n        <tr>\r\n            <td><img id=\"CellPicture\" src={deadmatter} alt=\"Dead matter\"/></td>\r\n            <td>Dead cell</td>\r\n            <td>This cell has died and is inert. Dead cells can't turn into a virus.</td>\r\n        </tr>\r\n\r\n        <tr>\r\n            <td><img id=\"cellPicture\"src={superspreader} alt=\"Super Spreader\"/></td>\r\n            <td>Super spreader</td>\r\n            <td>This cell is a superspreader, it explodes and spreads the virus everywhere around it.</td>\r\n        </tr>\r\n\r\n    </table>\r\n\r\n    </div>\r\n   );\r\n}","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useState } from 'react';\r\nimport './game.css';\r\nimport BoardCell from '../board-cell/boardCell';\r\nimport cloneDeep from 'lodash/cloneDeep';\r\nimport { useInterval } from '../../services/hooks';\r\nimport { getLevel, levelEndMessage } from '../../services/levels';\r\nimport {\r\n    CellType,\r\n    Cell,\r\n    Board,\r\n    activateSuperSpreaders,\r\n    activateAntiBodies,\r\n    getNeighbors as getNeighboursCount,\r\n} from '../../services/cell';\r\nimport sampleSize from 'lodash/sampleSize';\r\nimport logo from '../art/logo.png';\r\nimport Tutorial from '../tutorial/tutorial';\r\n/* import soundfile from './background.mp3'; */\r\nimport Sound from 'react-sound';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-var-requires\r\nconst x = require('./background.mp3');\r\n\r\nexport default function Game() {\r\n    let boardRef: any;\r\n    const interval = 300;\r\n    const [height, setHeight] = useState(0);\r\n    const [width, setWidth] = useState(0);\r\n    const [cellSize, setCellSize] = useState(0);\r\n    const [map, setMap] = useState<Board>([]);\r\n    const [maxClicks, setMaxClicks] = useState(0);\r\n    const [board, setBoard] = useState<Board>(map);\r\n    const [cells, setCells] = useState<Cell[]>([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [isRunning, setIsRunning] = useState(false);\r\n    const [message, setMessage] = useState('');\r\n    const [cellsUsed, setCellsUsed] = useState(0);\r\n    const [turnCounter, setTurnCounter] = useState(0);\r\n    const [currentLevel, setCurrentLevel] = useState(1);\r\n    const rows = height / cellSize;\r\n    const columns = width / cellSize;\r\n    const [hasRoundEnded, setHasRoundEnded] = useState(false);\r\n    const [hasWonRound, setHasWonRound] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (isLoading) {\r\n            return;\r\n        }\r\n        setCells(makeCells());\r\n    }, [board]);\r\n\r\n    useEffect(() => {\r\n        if (currentLevel > 8) {\r\n            setCurrentLevel(1);\r\n            return;\r\n        }\r\n        const level = getLevel(currentLevel);\r\n        setHeight(level.height);\r\n        setWidth(level.width);\r\n        setCellSize(level.cellSize);\r\n        setMap(level.map);\r\n        setMaxClicks(level.maxClicks);\r\n        setIsLoading(false);\r\n        reset(level.map);\r\n    }, [currentLevel]);\r\n\r\n    useEffect(() => {\r\n        if (!hasRoundEnded) {\r\n            return setMessage('');\r\n        }\r\n        if (hasWonRound) {\r\n            setMessage(levelEndMessage.success(turnCounter));\r\n        } else {\r\n            setMessage(levelEndMessage.fail(turnCounter));\r\n        }\r\n    }, [hasRoundEnded, hasWonRound]);\r\n\r\n    useInterval(\r\n        () => {\r\n            if (isRunning) {\r\n                nextTurn();\r\n            }\r\n        },\r\n        interval,\r\n        [isRunning],\r\n    );\r\n\r\n    function nextTurn() {\r\n        const newBoard = getNextBoard();\r\n        const hasAnyChanges = getHasAnyChanges(board, newBoard);\r\n\r\n        if (!hasAnyChanges) {\r\n            return endRound(board);\r\n        }\r\n\r\n        setBoard(newBoard);\r\n        setTurnCounter(turnCounter + 1);  \r\n    }\r\n\r\n    function getNextBoard() {\r\n        let newBoard = cloneDeep(board);\r\n\r\n        const antiBodies = [];\r\n        const superSpreaders = [];\r\n        for (let y = 0; y < rows; y += 1) {\r\n            for (let x = 0; x < columns; x += 1) {\r\n                const neighboursCount = getNeighboursCount(board, x, y, columns, rows);\r\n                const isVirusCellWithInvalidNeighborsCount =\r\n                    board[y][x] === CellType.virus && (neighboursCount < 2 || neighboursCount > 3);\r\n                const isEmptyCellWith3Neighbors = board[y][x] === CellType.empty && neighboursCount === 3;\r\n\r\n                if (isVirusCellWithInvalidNeighborsCount) {\r\n                    newBoard[y][x] = CellType.empty;\r\n                } else if (isEmptyCellWith3Neighbors) {\r\n                    newBoard[y][x] = CellType.virus;\r\n                } else if (board[y][x] === CellType.antibody) {\r\n                    antiBodies.push({ x, y });\r\n                } else if (board[y][x] === CellType.superSpreader) {\r\n                    superSpreaders.push({ x, y });\r\n                }\r\n            }\r\n        }\r\n        newBoard = activateSuperSpreaders(superSpreaders, newBoard, columns, rows);\r\n        newBoard = activateAntiBodies(antiBodies, newBoard, columns, rows);\r\n        return newBoard;\r\n    }\r\n\r\n    function getHasAnyChanges(board: Board, newBoard: Board) {\r\n        let hasAnyChanges = false;\r\n        for (let y = 0; y < rows; y += 1) {\r\n            for (let x = 0; x < columns; x += 1) {\r\n                if (board[y][x] !== newBoard[y][x]) {\r\n                    hasAnyChanges = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return hasAnyChanges;\r\n    }\r\n\r\n    function getHasWonRound(board: Board) {\r\n        let hasWon = true;\r\n        for (let y = 0; y < rows; y += 1) {\r\n            for (let x = 0; x < columns; x += 1) {\r\n                if ([CellType.virus, CellType.superSpreader].includes(board[y][x])) {\r\n                    hasWon = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return hasWon;\r\n    }\r\n\r\n    function makeCells() {\r\n        const cells: Cell[] = [];\r\n        for (let y = 0; y < rows; y += 1) {\r\n            for (let x = 0; x < columns; x += 1) {\r\n                if (board[y][x] !== CellType.empty) {\r\n                    const isOriginal = board[y][x] === map[y][x];\r\n                    cells.push({ x, y, type: board[y][x], isOriginal });\r\n                }\r\n            }\r\n        }\r\n\r\n        return cells;\r\n    }\r\n\r\n    function editCell({ clientX, clientY }: { clientX: number; clientY: number }) {\r\n        if (isRunning || hasRoundEnded) {\r\n            return;\r\n        }\r\n        setMessage('');\r\n        const { x, y } = getCellCoordinates(clientX, clientY);\r\n        const isElementOnMap = x >= 0 && x <= columns && y >= 0 && y <= rows;\r\n        if (!isElementOnMap) {\r\n            return;\r\n        }\r\n        const cell = cells.find((cell) => cell.x === x && cell.y === y);\r\n        if (cell?.isOriginal) {\r\n            return;\r\n        }\r\n\r\n        const newBoard = cloneDeep(board);\r\n        newBoard[y][x] = newBoard[y][x] !== CellType.empty ? CellType.empty : CellType.antibody;\r\n\r\n        if (newBoard[y][x] === CellType.empty) {\r\n            setCellsUsed(cellsUsed - 1);\r\n        } else if (cellsUsed < maxClicks) {\r\n            setCellsUsed(cellsUsed + 1);\r\n        } else {\r\n            return;\r\n        }\r\n\r\n        setBoard(newBoard);\r\n    }\r\n\r\n    function getCellCoordinates(clientX: number, clientY: number) {\r\n        const elemOffset = getElementOffset();\r\n        const offsetX = clientX - elemOffset.x;\r\n        const offsetY = clientY - elemOffset.y;\r\n        return {\r\n            x: Math.floor(offsetX / cellSize),\r\n            y: Math.floor(offsetY / cellSize),\r\n        };\r\n    }\r\n\r\n    function getElementOffset() {\r\n        const rect = boardRef?.getBoundingClientRect();\r\n        const doc = document.documentElement;\r\n\r\n        return {\r\n            x: rect.left + window.pageXOffset - doc.clientLeft,\r\n            y: rect.top + window.pageYOffset - doc.clientTop,\r\n        };\r\n    }\r\n\r\n    function endRound(board: Board) {\r\n        setIsRunning(false);\r\n        setHasRoundEnded(true);\r\n        setHasWonRound(getHasWonRound(board));\r\n    }\r\n\r\n    function pauseGame() {\r\n        setIsRunning(false);\r\n    }\r\n\r\n    function runGame() {\r\n        setIsRunning(true);\r\n        setTurnCounter(0);\r\n    }\r\n\r\n    function reset(newMap?: Board) {\r\n        setMessage('');\r\n        setBoard(newMap || map);\r\n        setTurnCounter(0);\r\n        setCellsUsed(0);\r\n        setHasRoundEnded(false);\r\n        setHasWonRound(false);\r\n    }\r\n\r\n    function handleRandom() {\r\n        setMessage('');\r\n        const newBoard = cloneDeep(map);\r\n        const emptyCells = [];\r\n        for (let y = 0; y < rows; y += 1) {\r\n            for (let x = 0; x < columns; x += 1) {\r\n                if (newBoard[y][x] === CellType.empty) {\r\n                    emptyCells.push({ x, y });\r\n                }\r\n            }\r\n        }\r\n        const randomPicks = sampleSize(emptyCells, maxClicks);\r\n        randomPicks.forEach((pick) => {\r\n            newBoard[pick.y][pick.x] = CellType.antibody;\r\n        });\r\n\r\n        setBoard(newBoard);\r\n        setCellsUsed(maxClicks);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"Logo\">\r\n                <img src={logo} alt=\"Logo\"/>\r\n                <p>Virus goes brr brr - you better stop it!</p>\r\n            </div>\r\n            <div className=\"CellsRemaining\">\r\n                <p>ANTIBODIES REMAINING <span className=\"Clicks\">: {maxClicks - cellsUsed}</span></p>\r\n            </div>\r\n            <div\r\n                className=\"Board\"\r\n                style={{ width, height, backgroundSize: `${cellSize}px ${cellSize}px` }}\r\n                onClick={editCell}\r\n                ref={(n) => {\r\n                    boardRef = n;\r\n                }}\r\n            >\r\n                {cells.map((cell) => (\r\n                    <BoardCell cell={cell} size={cellSize} key={`${cell.x}-${cell.y}`} />\r\n                ))}\r\n            </div>\r\n\r\n            <div className=\"Controls\">\r\n                {isRunning && (\r\n                    <>\r\n                        <button className=\"button\" onClick={pauseGame}>\r\n                            Pause\r\n                        </button>\r\n                    </>\r\n                )}\r\n                {!hasRoundEnded && !isRunning && (\r\n                    <>\r\n                        <button className=\"button\" onClick={runGame}>\r\n                            Run\r\n                        </button>\r\n                        <button className=\"button\" onClick={handleRandom}>\r\n                            {`I'm feeling lucky`}\r\n                        </button>\r\n                        <button\r\n                            className=\"button\"\r\n                            onClick={() => {\r\n                                reset();\r\n                            }}\r\n                        >\r\n                            Clear\r\n                        </button>\r\n                    </>\r\n                )}\r\n            </div>\r\n            <div className=\"Message\">\r\n                <p>{message}</p>\r\n                {!isRunning && hasRoundEnded && (\r\n                    <>\r\n                        {!hasWonRound && <button\r\n                            className=\"nextButton\"\r\n                            onClick={() => {\r\n                                reset();\r\n                            }}\r\n                        >\r\n                            Try again\r\n                        </button>}\r\n                        {hasWonRound && <button\r\n                            className=\"nextButton\"\r\n                            onClick={() => {\r\n                                setCurrentLevel(currentLevel + 1);\r\n                            }}\r\n                        >\r\n                            Continue\r\n                        </button>}\r\n                    </>\r\n                )}\r\n            <Tutorial />\r\n            <div className=\"Authors\">\r\n                <p>created by not mario brothers\r\n                </p>\r\n            </div>\r\n            <Sound loop\r\n                url={x}\r\n                playStatus=\"PLAYING\"\r\n            />\r\n        </div>\r\n        </div>\r\n    );\r\n}\r\n","/* eslint-disable consistent-return */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useEffect, useRef } from 'react';\n\nexport function useInterval(callback: Function, intervalInMilliseconds: number, watchProperties: any[] = []) {\n    const callbackReference = useRef();\n    callbackReference.current = callback as any;\n\n    useEffect(() => {\n        if (!intervalInMilliseconds) {\n            return;\n        }\n\n        const intervalReference = setInterval(() => (callbackReference as any).current(), intervalInMilliseconds);\n\n        return () => {\n            if (intervalReference) {\n                clearInterval(intervalReference);\n            }\n        };\n    }, watchProperties);\n}\n\nexport function useTimeout(callback: Function, timeoutInMilliseconds: number, watchProperties: any[] = []) {\n    useEffect(() => {\n        if (!timeoutInMilliseconds) {\n            return;\n        }\n\n        const timeoutReference = setTimeout(callback, timeoutInMilliseconds);\n\n        return () => {\n            if (timeoutReference) {\n                clearTimeout(timeoutReference);\n            }\n        };\n    }, watchProperties);\n}\n","import React from 'react';\nimport './App.css';\nimport Game from './components/game/game';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <Game />\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.e788370c.png\";","module.exports = __webpack_public_path__ + \"static/media/virus.4e113c7e.svg\";","module.exports = __webpack_public_path__ + \"static/media/antibody.396c8e3c.svg\";","module.exports = __webpack_public_path__ + \"static/media/deadmatter.0bdfeadf.svg\";","module.exports = __webpack_public_path__ + \"static/media/superspreader.33134dd2.svg\";"],"sourceRoot":""}