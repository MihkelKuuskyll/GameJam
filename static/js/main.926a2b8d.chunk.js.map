{"version":3,"sources":["components/board-cell/boardCell.tsx","services/cell.ts","services/hooks.ts","services/levels.ts","components/game/game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["BoardCell","cell","size","className","type","style","left","x","top","y","width","height","CellType","useInterval","callback","intervalInMilliseconds","watchProperties","callbackReference","useRef","current","useEffect","intervalReference","setInterval","clearInterval","activateAntiBodies","antiBodies","board","columns","rows","directions","forEach","antibody","direction","y1","x1","virus","hasKilledEnemies","superSpreader","includes","empty","killAllNearbyEnemies","activateSuperSpreaders","superSpreaders","infectAllNearbyEmpty","getNeighbors","neighbors","i","length","level1","cellSize","maxClicks","map","level2","level3","level4","deadMatter","level5","level6","antibodyExampleLevel","superSpreaderExampleLevel","Game","boardRef","1","2","3","4","5","6","7","8","useState","setBoard","cells","setCells","interval","isRunning","setIsRunning","message","setMessage","cellsUsed","setCellsUsed","turnCounter","setTurnCounter","isOriginal","push","makeCells","newBoard","cloneDeep","neighboursCount","getNeighboursCount","isVirusCellWithInvalidNeighborsCount","isEmptyCellWith3Neighbors","getNextBoard","hasAnyChanges","getHasAnyChanges","nextTurn","backgroundSize","onClick","clientX","clientY","elemOffset","rect","getBoundingClientRect","doc","document","documentElement","window","pageXOffset","clientLeft","pageYOffset","clientTop","getElementOffset","offsetX","offsetY","Math","floor","getCellCoordinates","find","random","ref","n","key","emptyCells","sampleSize","pick","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.926a2b8d.chunk.js","sourcesContent":["import React from 'react';\nimport './boardCell.css';\nimport { Cell } from '../../services/cell';\n\ntype Props = {\n    cell: Cell;\n    size: number;\n};\n\nexport default function BoardCell({ cell, size }: Props) {\n    return (\n        <div\n            className={`cell ${cell.type}`}\n            style={{\n                left: `${size * cell.x + 1}px`,\n                top: `${size * cell.y + 1}px`,\n                width: `${size - 1}px`,\n                height: `${size - 1}px`,\n            }}\n        />\n    );\n}\n","export type Board = CellType[][];\nexport type CellLocation = { x: number; y: number };\n\nexport type Cell = {\n    x: number;\n    y: number;\n    type: CellType;\n    isOriginal: boolean;\n}\n\nexport enum CellType {\n    antibody = 'antibody',\n    deadMatter = 'deadMatter',\n    empty = 'empty',\n    virus = 'virus',\n    superSpreader = 'superSpreader',\n}\n\nexport function activateAntiBodies(antiBodies: CellLocation[], board: Board, columns: number, rows: number) {\n    const directions = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\n    antiBodies.forEach(antibody => {\n        directions.forEach(direction => {\n            const y1 = antibody.y + direction[0];\n            const x1 = antibody.x + direction[1];\n            if (x1 >= 0 && x1 < columns && y1 >= 0 && y1 < rows && board[y1][x1] === CellType.virus) {\n                board = killAllNearbyEnemies(antibody, board, columns, rows);\n            }\n        });\n    });\n    return board;\n}\n\nexport function activateSuperSpreaders(superSpreaders: CellLocation[], board: Board, columns: number, rows: number) {\n    const directions = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\n    superSpreaders.forEach(superSpreader => {\n        directions.forEach(direction => {\n            const y1 = superSpreader.y + direction[0];\n            const x1 = superSpreader.x + direction[1];\n            if (x1 >= 0 && x1 < columns && y1 >= 0 && y1 < rows && board[y1][x1] === CellType.virus) {\n                board = infectAllNearbyEmpty(superSpreader, board, columns, rows);\n            }\n        });\n    });\n    return board;\n}\n\nexport function getNeighbors(board: Board, x: number, y: number, columns: number, rows: number) {\n    let neighbors = 0;\n    const directions = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\n    for (let i = 0; i < directions.length; i+=1) {\n        const direction = directions[i];\n        const y1 = y + direction[0];\n        const x1 = x + direction[1];\n\n        const isNearbyCellViralFriendly = x1 >= 0 && x1 < columns && y1 >= 0 && y1 < rows && ![CellType.empty, CellType.antibody].includes(board[y1][x1]);\n        if (isNearbyCellViralFriendly) {\n            neighbors += 1;\n        }\n    }\n\n    return neighbors;\n}\n\nexport function getRandomCellType() {\n    if (Math.random() > 0.5) {\n        return CellType.virus;\n    }\n    if (Math.random() > 0.5) {\n        return CellType.deadMatter;\n    }\n    if (Math.random() > 0.5) {\n        return CellType.superSpreader;\n    }\n    return CellType.antibody;\n}\n\nfunction infectAllNearbyEmpty(superSpreader: CellLocation, board: Board, columns: number, rows: number) {\n    const directions = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\n    directions.forEach(direction => {\n        const y1 = superSpreader.y + direction[0];\n        const x1 = superSpreader.x + direction[1];\n        const isNearbyEmptyCell = x1 >= 0 && x1 < columns && y1 >= 0 && y1 < rows && board[y1][x1] === CellType.empty;\n        if (isNearbyEmptyCell) {\n            board[y1][x1] = CellType.virus;\n        }\n    });\n    board[superSpreader.y][superSpreader.x] = CellType.virus;\n    return board;\n}\n\nfunction killAllNearbyEnemies(antibody: CellLocation, board: Board, columns: number, rows: number) {\n    const directions = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\n    let hasKilledEnemies = false;\n    directions.forEach(direction => {\n        const y1 = antibody.y + direction[0];\n        const x1 = antibody.x + direction[1];\n        const isNearbyViralCell = x1 >= 0 && x1 < columns && y1 >= 0 && y1 < rows && [CellType.superSpreader, CellType.virus].includes(board[y1][x1]);\n        if (isNearbyViralCell) {\n            hasKilledEnemies = true;\n            board[y1][x1] = CellType.empty;\n        }\n    });\n    if (hasKilledEnemies) {\n        board[antibody.y][antibody.x] = CellType.empty;\n    }\n    \n    return board;\n}","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback: Function, intervalInMilliseconds: number, watchProperties: any[] = []) {\n    const callbackReference = useRef();\n    callbackReference.current = callback as any;\n\n    useEffect(() => {\n        if (!intervalInMilliseconds) {\n            return;\n        }\n\n        const intervalReference = setInterval(() => (callbackReference as any).current(), intervalInMilliseconds);\n\n        return () => {\n            if (intervalReference) {\n                clearInterval(intervalReference);\n            }\n        };\n    }, watchProperties);\n}\n\nexport function useTimeout(callback: Function, timeoutInMilliseconds: number, watchProperties: any[] = []) {\n    useEffect(() => {\n        if (!timeoutInMilliseconds) {\n            return;\n        }\n\n        const timeoutReference = setTimeout(callback, timeoutInMilliseconds);\n\n        return () => {\n            if (timeoutReference) {\n                clearTimeout(timeoutReference);\n            }\n        };\n    }, watchProperties);\n}","import { CellType } from \"./cell\";\n\n\nconst level1 = {\n    cellSize: 20,\n    height: 60,\n    width: 60,\n    maxClicks: 3,\n    map: [[CellType.empty,CellType.empty,CellType.empty],\n[CellType.empty, CellType.virus, CellType.virus],\n[CellType.empty, CellType.virus, CellType.virus]],\n};\n\nconst level2 = {\n    cellSize: 20,\n    height: 60,\n    width: 60,\n    maxClicks: 3,\n    map: [[CellType.virus,CellType.empty,CellType.empty],\n[CellType.empty, CellType.virus, CellType.empty],\n[CellType.virus, CellType.empty, CellType.virus]],\n};\n\nconst level3 = {\n    cellSize: 20,\n    height: 60,\n    width: 60,\n    maxClicks: 3,\n    map: [[CellType.virus,CellType.empty,CellType.empty],\n[CellType.empty, CellType.virus, CellType.empty],\n[CellType.virus, CellType.empty, CellType.virus]],\n};\n\nconst level4 = {\n    cellSize: 20,\n    height: 60,\n    width: 60,\n    maxClicks: 3,\n    map: [[CellType.empty,CellType.empty,CellType.empty],\n[CellType.deadMatter, CellType.empty, CellType.empty],\n[CellType.empty, CellType.empty, CellType.virus]],\n};\n\nconst level5 = {\n    cellSize: 20,\n    height: 60,\n    width: 60,\n    maxClicks: 3,\n    map: [[CellType.virus,CellType.empty,CellType.deadMatter],\n[CellType.deadMatter, CellType.deadMatter, CellType.empty],\n[CellType.empty, CellType.empty, CellType.empty]],\n};\nconst level6 = {\n    cellSize: 20,\n    height: 100,\n    width: 100,\n    maxClicks: 5,\n    map: [[CellType.empty,CellType.empty,CellType.empty,CellType.empty,CellType.empty],\n[CellType.empty,CellType.empty,CellType.empty,CellType.empty,CellType.empty],\n[CellType.empty,CellType.empty,CellType.empty,CellType.empty,CellType.empty],\n[CellType.empty,CellType.empty,CellType.empty,CellType.empty,CellType.empty],\n[CellType.empty,CellType.empty,CellType.empty,CellType.empty,CellType.empty]],\n};\nconst antibodyExampleLevel = {\n    cellSize: 20,\n    height: 100,\n    width: 100,\n    maxClicks: 5,\n    map: [\n        [CellType.antibody, CellType.empty, CellType.virus, CellType.empty, CellType.empty],\n        [CellType.empty, CellType.antibody, CellType.virus, CellType.empty, CellType.empty],\n        [CellType.empty, CellType.empty, CellType.antibody, CellType.empty, CellType.empty],\n        [CellType.empty, CellType.empty, CellType.empty, CellType.antibody, CellType.empty],\n        [CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty],\n    ],\n};\nconst superSpreaderExampleLevel = {\n    cellSize: 20,\n    height: 100,\n    width: 100,\n    maxClicks: 5,\n    map: [\n        [CellType.superSpreader, CellType.virus, CellType.virus, CellType.empty, CellType.empty],\n        [CellType.empty, CellType.empty, CellType.virus, CellType.empty, CellType.empty],\n        [CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty],\n        [CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty],\n        [CellType.empty, CellType.empty, CellType.empty, CellType.empty, CellType.empty],\n    ],\n};\n\nexport function getLevel(levelNumber: number) {\n    const x: { [key: string]: Level} = {\n        1: level1,\n        2: level2,\n        3: level3,\n        4: level4,\n        5: level5,\n        6: level6,\n        7: antibodyExampleLevel,\n        8: superSpreaderExampleLevel,\n    };\n    return x[levelNumber];\n}\n\ntype Level = {\n    cellSize: number;\n    height: number;\n    width: number;\n    maxClicks: number;\n    map: CellType[][];\n}","import React, { useEffect, useState } from 'react';\nimport './game.css';\nimport BoardCell from '../board-cell/boardCell';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { useInterval } from '../../services/hooks';\nimport { CellType, Cell, getRandomCellType, Board, activateSuperSpreaders, activateAntiBodies, getNeighbors as getNeighboursCount } from '../../services/cell';\nimport { getLevel } from '../../services/levels';\nimport sampleSize from 'lodash/sampleSize';\n\nexport default function Game() {\n    const { height, width, cellSize, map, maxClicks } = getLevel(8);\n    const rows = height / cellSize;\n    const columns = width / cellSize;\n    let boardRef: any;\n    const [board, setBoard] = useState<Board>(map);\n    const [cells, setCells] = useState<Cell[]>([]);\n    const [interval, setInterval] = useState(500);\n    const [isRunning, setIsRunning] = useState(false);\n    const [message, setMessage] = useState('');\n    const [cellsUsed, setCellsUsed] = useState(0);\n    const [turnCounter, setTurnCounter] = useState(0);\n\n    useEffect(() => {\n        setCells(makeCells());\n    }, [board]);\n\n    useInterval(() => {\n        if (isRunning) {\n            nextTurn();\n        }\n    }, interval, [isRunning]);\n\n    function nextTurn() {\n        const newBoard = getNextBoard();\n        const hasAnyChanges = getHasAnyChanges(board, newBoard);\n        if (hasAnyChanges) {\n            setBoard(newBoard);\n        }\n        else {\n            setIsRunning(false);\n            setMessage(`GG no re, it took ${turnCounter} iterations.`);\n        }\n        setTurnCounter(turnCounter+1);\n    }\n\n    function getNextBoard() {\n        let newBoard = cloneDeep(board);\n\n        const antiBodies = [];\n        const superSpreaders = [];\n        for (let y = 0; y < rows; y+=1) {\n            for (let x = 0; x < columns; x+=1) {\n                const neighboursCount = getNeighboursCount(board, x, y, columns, rows);\n                const isVirusCellWithInvalidNeighborsCount = board[y][x] === CellType.virus && (neighboursCount < 2 || neighboursCount > 3);\n                const isEmptyCellWith3Neighbors = board[y][x] === CellType.empty && neighboursCount === 3;\n\n                if (isVirusCellWithInvalidNeighborsCount) {\n                    newBoard[y][x] = CellType.empty;\n                } else if (isEmptyCellWith3Neighbors) {\n                    newBoard[y][x] = CellType.virus;\n                } else if (board[y][x] === CellType.antibody) {\n                    antiBodies.push({ x, y });\n                } else if (board[y][x] === CellType.superSpreader) {\n                    superSpreaders.push({ x, y });\n                }\n            }\n        }\n        newBoard = activateSuperSpreaders(superSpreaders, newBoard, columns, rows);\n        newBoard = activateAntiBodies(antiBodies, newBoard, columns, rows);\n        return newBoard;\n    }\n\n    function getHasAnyChanges(board: Board, newBoard: Board) {\n        let hasAnyChanges = false;\n        for (let y = 0; y < rows; y+=1) {\n            for (let x = 0; x < columns; x+=1) {\n                if (board[y][x] !== newBoard[y][x]) {\n                    hasAnyChanges = true;\n                    break;\n                }\n            }\n        }\n        return hasAnyChanges;\n    }\n\n    function makeCells() {\n        const cells: Cell[] = [];\n        for (let y = 0; y < rows; y += 1) {\n            for (let x = 0; x < columns; x += 1) {\n                if (board[y][x] !== CellType.empty) {\n                    const isOriginal = board[y][x] === map[y][x];\n                    cells.push({ x, y, type: board[y][x], isOriginal });\n                }\n            }\n        }\n\n        return cells;\n    }\n\n    function editCell({ clientX, clientY }: { clientX: number; clientY: number }) {\n        if (isRunning) {\n            return;\n        }\n        setMessage(\"\");\n        const { x, y } = getCellCoordinates(clientX, clientY);\n        const isElementOnMap = x >= 0 && x <= columns && y >= 0 && y <= rows;\n        if (!isElementOnMap) {\n            return;\n        }\n        const cell = cells.find(cell => cell.x === x && cell.y === y);\n        if (cell?.isOriginal) {\n            return;\n        }\n\n        const newBoard = cloneDeep(board);\n        newBoard[y][x] = newBoard[y][x] !== CellType.empty ? CellType.empty : getRandomCellType();\n        \n        if(newBoard[y][x] === CellType.empty){\n            setCellsUsed(cellsUsed - 1);\n        }\n        else if(cellsUsed < maxClicks) {\n            setCellsUsed(cellsUsed + 1);\n        }\n        else {\n            return;\n        }\n\n        setBoard(newBoard);\n    }\n\n    function getCellCoordinates(clientX: number, clientY: number) {\n        const elemOffset = getElementOffset();\n        const offsetX = clientX - elemOffset.x;\n        const offsetY = clientY - elemOffset.y;\n        return {\n            x: Math.floor(offsetX / cellSize),\n            y: Math.floor(offsetY / cellSize),\n        };\n    }\n\n    function getElementOffset() {\n        const rect = boardRef?.getBoundingClientRect();\n        const doc = document.documentElement;\n\n        return {\n            x: rect.left + window.pageXOffset - doc.clientLeft,\n            y: rect.top + window.pageYOffset - doc.clientTop,\n        };\n    }\n\n    function stopGame() {\n        setIsRunning(false);\n    }\n\n    function runGame() {\n        setIsRunning(true);\n        setTurnCounter(0);\n    }\n\n    function handleClear() {\n        setMessage(\"\");\n        setBoard(map);\n        setTurnCounter(0);\n        setCellsUsed(0);\n    }\n\n    function handleRandom() {\n        setMessage('');\n        const newBoard = cloneDeep(map);\n        const emptyCells = [];\n        for (let y = 0; y < rows; y += 1) {\n            for (let x = 0; x < columns; x += 1) {\n                if (newBoard[y][x] === CellType.empty) {\n                    emptyCells.push({ x, y });\n                }\n            }\n        }\n        const randomPicks = sampleSize(emptyCells, maxClicks);\n        randomPicks.forEach(pick => {\n            newBoard[pick.y][pick.x] = CellType.virus;\n        });\n\n        setBoard(newBoard);\n        setCellsUsed(maxClicks);\n    }\n\n    return (\n        <div>\n            <div className=\"CellsRemaining\">\n                <p>Cells remaining: {maxClicks-cellsUsed}</p>\n            </div>\n            <div className=\"Board\"\n                style={{ width, height, backgroundSize: `${cellSize}px ${cellSize}px` }}\n                onClick={editCell}\n                ref={(n) => {\n                    boardRef = n;\n                }}\n            >\n                {cells.map((cell) => (\n                    <BoardCell cell={cell} size={cellSize} key={`${cell.x}-${cell.y}`}/>\n                ))}\n            </div>\n\n            <div className=\"Controls\">\n                    {isRunning ?\n                        <button className=\"button\" onClick={stopGame}>Stop</button> :\n                        <button className=\"button\" onClick={runGame}>Run</button> \n                    }\n                        <button className=\"button\" onClick={handleRandom}>Random</button>\n                        <button className=\"button\" onClick={handleClear}>Clear</button>\n            </div>\n            <div className=\"Message\">\n                {message}\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport './App.css';\nimport Game from './components/game/game';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <Game />\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}